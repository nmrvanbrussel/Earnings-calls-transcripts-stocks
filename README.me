# AI Chip Strategy Analysis

**An NLP-based analysis of strategic communications in the semiconductor industry using FinBERT for sentiment analysis and strategic insights.**

---

## Project Overview

This project analyzes earnings call transcripts from major semiconductor companies (AMD, NVIDIA) to extract strategic insights using advanced NLP techniques. The focus is on understanding how companies communicate their strategic intentions through public earnings calls.

---

## What's Been Implemented

### Data Collection
- **Web scraping scripts** for earnings call transcripts from AMD and NVIDIA
- **Structured data extraction** including speaker roles, Q&A turns, and metadata
- **Multiple data runs** with comprehensive call participant information

### NLP Pipeline
- **FinBERT sentiment analysis** for financial text understanding
- **768-dimensional embeddings** for semantic similarity analysis
- **Sliding window processing** for handling long documents
- **Sentiment probability scores** (positive, negative, neutral)

### Data Processing
- **Automated text vectorization** using Hugging Face Transformers
- **Chunked processing** for efficient handling of long transcripts
- **Error handling** with fallback mechanisms
- **Progress tracking** with tqdm integration

---

## Current Data Assets

### Earnings Call Data
- **AMD Q&A turns**: 1,393+ conversation turns from earnings calls
- **NVIDIA earnings calls**: Complete transcript data
- **Call participants**: Detailed speaker information and roles
- **Metadata**: Publication dates, quarters, source URLs

### Generated Features
- **FinBERT embeddings**: 768-dimensional vectors for semantic analysis
- **Sentiment probabilities**: 3-class sentiment classification
- **Predicted labels**: Automated sentiment classification
- **Confidence scores**: Model confidence for predictions

---

## Technical Implementation

### Core Scripts
- `vectorizing_data.py` - Main FinBERT processing pipeline
- `scraping_QNA.py` - Q&A transcript extraction
- `scrape_call_participants.py` - Participant data collection
- `scraper_earnings_calls_transcripts.py` - Full transcript scraping

### Key Features
- **GPU/CPU optimization** with automatic device detection
- **Memory-efficient processing** with chunked text handling
- **Robust error handling** for large-scale data processing
- **Progress visualization** for long-running operations

---

## Tech Stack

| Component | Technology | Purpose |
|-----------|------------|---------|
| **NLP Models** | FinBERT (ProsusAI) | Financial sentiment analysis |
| **Web Scraping** | BeautifulSoup, Playwright | Data collection |
| **Data Processing** | Pandas, NumPy | Data manipulation |
| **ML Framework** | PyTorch, Transformers | Model inference |
| **Storage** | Parquet format | Efficient data storage |
| **Environment** | Python 3.11, Virtual Environment | Development setup |

---

## Project Structure

```
AI_CHIP_STRATEGY/
├── Data/CSV/                    # Raw earnings call data
│   ├── amd_qna_turns.csv       # AMD Q&A conversations
│   ├── nvidia_earnings_calls.csv
│   └── run_*_amd_qna_turns.csv # Multiple data collection runs
├── Scraping/                    # Data collection scripts
│   ├── scraping_QNA.py
│   ├── scrape_call_participants.py
│   └── scraper_earnings_calls_transcripts.py
├── vectorizing_data.py         # Main FinBERT processing
├── finbert_embeddings_plus_probs.parquet  # Generated features
└── venv/                       # Python virtual environment
```

---

## Usage

### 1. Setup Environment
```bash
# Install dependencies
pip install transformers torch tqdm pandas pyarrow beautifulsoup4 playwright

# Activate virtual environment
venv\Scripts\activate  # Windows
```

### 2. Run Data Collection
```bash
python Scraping/scraping_QNA.py
python Scraping/scrape_call_participants.py
```

### 3. Process with FinBERT
```bash
python vectorizing_data.py
```

### 4. Analyze Results
The script generates:
- **Sentiment probabilities** for each text segment
- **768-dimensional embeddings** for semantic analysis
- **Predicted labels** and confidence scores
- **Parquet output** for efficient storage and analysis

---

## Key Insights Generated

- **Strategic sentiment analysis** of earnings call communications
- **Semantic embeddings** for similarity analysis between statements
- **Confidence scoring** for model predictions
- **Structured data** ready for further analysis or visualization

---

## Next Steps

- [ ] **Topic modeling** with BERTopic or LDA
- [ ] **Time series analysis** of sentiment trends
- [ ] **Strategic signal detection** using embedding similarity
- [ ] **Interactive dashboard** with Streamlit
- [ ] **Game theory modeling** of competitive dynamics

---

## Data Quality

- **1,393+ text segments** from AMD earnings calls
- **Multiple collection runs** for data validation
- **Comprehensive metadata** including speaker roles and dates
- **High-quality transcripts** from official earnings call sources

---

## Author

Niels van Brussel

---

## License

This project is licensed under the MIT License.